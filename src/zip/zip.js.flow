// @flow

type ZipWithType = <A, B, C>(fn: (A) => B => C) => (A[]) => (B[]) => C[]

type ZipType = <A, B>(A[]) => (B[]) => [A, B][]

type ZipFindWithType = <A, B, C>(
  p: (A) => B => boolean
) => (fn: (A) => B => C) => (A[]) => (B[]) => C[]

type ZipFindType = <A, B>(p: (A) => B => boolean) => (A[]) => (B[]) => [A, B][]

type ZipByWithType = <A, B, C>(
  getMatchObj: (A) => Object
) => (fn: (A) => B => C) => (A[]) => (B[]) => C[]

type ZipByType = <A, B>(
  getMatchObj: (A) => Object
) => (A[]) => (B[]) => [A, B][]

declare export var zipWith: ZipWithType
declare export var zip: ZipType
declare export var zipByWith: ZipByWithType
declare export var zipBy: ZipByType

export type {
  ZipWithType,
  ZipType,
  ZipFindWithType,
  ZipFindType,
  ZipByWithType,
  ZipByType,
}
